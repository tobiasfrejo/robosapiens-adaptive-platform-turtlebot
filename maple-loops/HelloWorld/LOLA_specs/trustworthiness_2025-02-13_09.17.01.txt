Command: docker run --network host -it --rm -v /home/amalie/Documents/LOLA_specs:/mnt/host_models thomasdwright/trustworthiness-checker:latest /mnt/host_models/maple_anomaly_loop.lola --input-mqtt-topics stage

========     SPECIFICATION      =======
Source: maple_anomaly_loop.lola
in stage : Str
out m: Bool
out a: Bool
out p: Bool
out l: Bool
out e: Bool
out maple : Bool
out stageout : Str
m = (stage == "m") && e[-1, true]
a = (stage == "a") && m[-1, false] 
p = (stage == "p") && (a[-1, false] || l[-1, false]) 
l = (stage == "l") && p[-1, false]
e = (stage == "e") && l[-1, false]
maple = m || a || p || l || e
stageout = stage

======== TRUSTWORTHINESS OUTPUT =======
Model: LOLASpecification { input_vars: [VarName("stage")], output_vars: [VarName("m"), VarName("a"), VarName("p"), VarName("l"), VarName("e"), VarName("maple"), VarName("stageout")], exprs: {VarName("a"): BinOp(Eq(Var(VarName("stage")), Val(Str("a"))), Index(Var(VarName("m")), -1, Bool(false)), BOp(And)), VarName("e"): BinOp(Eq(Var(VarName("stage")), Val(Str("e"))), Index(Var(VarName("l")), -1, Bool(false)), BOp(And)), VarName("l"): BinOp(Eq(Var(VarName("stage")), Val(Str("l"))), Index(Var(VarName("p")), -1, Bool(false)), BOp(And)), VarName("m"): BinOp(Eq(Var(VarName("stage")), Val(Str("m"))), Index(Var(VarName("e")), -1, Bool(true)), BOp(And)), VarName("maple"): BinOp(BinOp(BinOp(BinOp(Var(VarName("m")), Var(VarName("a")), BOp(Or)), Var(VarName("p")), BOp(Or)), Var(VarName("l")), BOp(Or)), Var(VarName("e")), BOp(Or)), VarName("p"): BinOp(Eq(Var(VarName("stage")), Val(Str("p"))), BinOp(Index(Var(VarName("a")), -1, Bool(false)), Index(Var(VarName("l")), -1, Bool(false)), BOp(Or)), BOp(And)), VarName("stageout"): Var(VarName("stage"))}, type_annotations: {VarName("a"): Bool, VarName("e"): Bool, VarName("l"): Bool, VarName("m"): Bool, VarName("maple"): Bool, VarName("p"): Bool, VarName("stage"): Str, VarName("stageout"): Str} }
a[0] = Bool(false)
e[0] = Bool(false)
l[0] = Bool(false)
m[0] = Bool(true)
maple[0] = Bool(true)
p[0] = Bool(false)
stageout[0] = Str("m")
a[1] = Bool(true)
e[1] = Bool(false)
l[1] = Bool(false)
m[1] = Bool(false)
maple[1] = Bool(true)
p[1] = Bool(false)
stageout[1] = Str("a")
a[2] = Bool(false)
e[2] = Bool(false)
l[2] = Bool(false)
m[2] = Bool(false)
maple[2] = Bool(true)
p[2] = Bool(true)
stageout[2] = Str("p")
a[3] = Bool(false)
e[3] = Bool(false)
l[3] = Bool(false)
m[3] = Bool(false)
maple[3] = Bool(false)
p[3] = Bool(false)
stageout[3] = Str("e")
a[4] = Bool(false)
e[4] = Bool(false)
l[4] = Bool(false)
m[4] = Bool(false)
maple[4] = Bool(false)
p[4] = Bool(false)
stageout[4] = Str("l")
a[5] = Bool(false)
e[5] = Bool(false)
l[5] = Bool(false)
m[5] = Bool(false)
maple[5] = Bool(false)
p[5] = Bool(false)
stageout[5] = Str("e")
^C